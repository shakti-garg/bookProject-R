{
    "contents" : "library(shiny)\n\nlibrary(ggplot2)\nlibrary(reshape2)\n\nappearData <- read.csv(file=\"data/1-appearance.csv\", as.is=TRUE);\nappearData$BookName <- as.factor(appearData$BookName)\nappearData$ChapterName <- as.factor(appearData$ChapterName)\nappearData$Percentile <- as.numeric(appearData$Percentile)\n\nbookNameList <- as.list(as.character(unique(appearData$BookName)))\n\nsentiData <- read.csv(file=\"data/2-sentiment.csv\", as.is=TRUE);\nsentiData$BookName <- as.factor(sentiData$BookName)\nsentiData$ChapterName <- as.factor(sentiData$ChapterName)\nsentiData$Percentile <- as.numeric(sentiData$Percentile)\nsentiData$Sentiment <- factor(sentiData$Sentiment, levels=c(\"Very positive\",\"Positive\",\"Neutral\",\"Negative\", \"Very negative\"))\n\n\nshinyServer(function(input, output, session) {\n  \n  output$bookFilter <- renderUI({ radioButtons(inputId=\"bookName\", label = h4(\"Book Name\"), \n                                               choices = bookNameList, selected = bookNameList[[1]])\n  })\n  \n  getChapterNames <- reactive({\n    if(length(input$bookName) != 0){\n      filteredData <- appearData[appearData$BookName == input$bookName, ]\n      \n      unique(as.character(filteredData$ChapterName))\n    }\n  })\n  \n  observe({\n    if(length(input$bookName) != 0){\n      numChapters <- length(getChapterNames())\n      output$chapterFilter <- renderUI({ sliderInput(\"chapters\", \"Chapter Numbers:\", min=1, \n                                                     max=numChapters, step=1, \n                                                     value=c(1,numChapters))  \n      })\n    }\n  })                        \n  \n  filterAppearData <- reactive({\n    if(length(input$bookName) != 0 & length(input$chapters) != 0){\n      filteredData <- appearData[appearData$BookName == input$bookName, ]\n      \n      selectedChapNames <- unique(as.character(filteredData$ChapterName))[c(input$chapters[1]:input$chapters[2])]\n      filteredData <- filteredData[as.character(filteredData$ChapterName) %in% selectedChapNames,]\n      \n      charTable <- data.frame(table(filteredData$CharacterName))\n      charTable$Var1 <- as.character(charTable$Var1)\n      charLevels <- charTable$Var1[order(charTable$Freq, decreasing=FALSE)]\n      filteredData$CharacterName <- factor(filteredData$CharacterName,levels=charLevels)\n      \n      filteredData$color <- sapply(filteredData$CharacterName, FUN=function(x) {log(log(log(charTable$Freq[charTable$Var1 == x])))})\n      \n      filteredData\n    }\n  })\n  \n  output$appearancePlot <- renderPlot({\n    plotData <- filterAppearData()\n    \n    if(length(plotData) != 0){\n      chapLabels <- getChapterNames()\n      #num_chars <- sum(data.frame(table(plotData$Character))$Freq != 0)\n      #size <- min(12, exp(4.97 - 0.96*log(num_chars)))\n      \n      cGraph <- ggplot(plotData, aes(x=Percentile, y=CharacterName, colour=color))\n      cGraph <- cGraph + geom_point(shape=\"|\", size=4)\n      cGraph <- cGraph + scale_x_continuous(\"Chapter\", expand=c(0,0), limits=c(input$Chapters[1],input$Chapters[2]), breaks=seq(0,length(chapLabels)-1)+0.5, labels=chapLabels)\n      cGraph <- cGraph + theme(axis.text.x = element_text(colour=\"black\", angle = 45, hjust = 1, vjust=1.03),\n                             axis.text.y = element_text(colour = \"black\"),\n                             axis.title.x = element_text(vjust=5),\n                             axis.ticks = element_blank())\n      cGraph <- cGraph + theme(plot.background = element_rect(fill = \"transparent\",colour = NA))\n      cGraph <- cGraph + theme(panel.grid.minor = element_line(colour = \"white\", size = 1),\n                             panel.grid.major = element_blank())\n      cGraph <- cGraph + scale_size_continuous(guide = FALSE)\n      cGraph <- cGraph + scale_alpha_continuous(guide = FALSE)\n      cGraph <- cGraph + scale_colour_gradient(high='#B40404', low='#C65454', guide = FALSE)\n    \n      cGraph\n    }\n  }, height=700)\n  \n  filterSentiData <- reactive({\n    if(length(input$bookName) != 0 & length(input$chapters) != 0){\n      filteredData <- sentiData[sentiData$BookName == input$bookName, ]\n      \n      selectedChapNames <- unique(as.character(filteredData$ChapterName))[c(input$chapters[1]:input$chapters[2])]\n      filteredData <- filteredData[as.character(filteredData$ChapterName) %in% selectedChapNames,]\n      \n      charTable <- data.frame(table(filteredData$CharacterName))\n      charTable$Var1 <- as.character(charTable$Var1)\n      charLevels <- charTable$Var1[order(charTable$Freq, decreasing=FALSE)]\n      filteredData$CharacterName <- factor(filteredData$CharacterName,levels=charLevels)\n      \n      filteredData\n    }\n  })\n  \n  output$sentimentPlot <- renderPlot({\n    plotData <- filterSentiData()\n    \n    if(length(plotData) != 0){\n      chapLabels <- getChapterNames()\n      #num_chars <- sum(data.frame(table(plotData$Character))$Freq != 0)\n      #size <- min(12, exp(4.97 - 0.96*log(num_chars)))\n      \n      cGraph <- ggplot(plotData, aes(x=Percentile, y=CharacterName, colour=Sentiment))\n      cGraph <- cGraph + geom_point(shape=\"|\", size=4)\n      cGraph <- cGraph + scale_x_continuous(\"Chapter\", expand=c(0,0), limits=c(input$Chapters[1],input$Chapters[2]), breaks=seq(0,length(chapLabels)-1)+0.5, labels=chapLabels)\n      cGraph <- cGraph + theme(axis.text.x = element_text(colour=\"black\", angle = 45, hjust = 1, vjust=1.03),\n                               axis.text.y = element_text(colour = \"black\"),\n                               axis.title.x = element_text(vjust=5),\n                               axis.ticks = element_blank())\n      cGraph <- cGraph + theme(plot.background = element_rect(fill = \"transparent\",colour = NA))\n      cGraph <- cGraph + theme(panel.grid.minor = element_line(colour = \"white\", size = 1),\n                               panel.grid.major = element_blank())\n      cGraph <- cGraph + scale_size_continuous(guide = FALSE)\n      cGraph <- cGraph + scale_alpha_continuous(guide = FALSE)\n      cGraph <- cGraph + scale_colour_manual(values=c(\"Very negative\"=\"red\",\"Negative\"=\"hotpink\",\"Neutral\"=\"Yellow\",\"Positive\"=\"cyan\",\"Very positive\"=\"green\"), \n                                             guide=guide_legend(override.aes=aes(shape=15)))\n      \n      cGraph\n    }\n  }, height=700)\n  \n  filterCooccurenceData <- reactive({\n    if(length(input$bookName) != 0 & length(input$chapters) != 0){\n      filteredData <- appearData[appearData$BookName == input$bookName, ]\n      \n      selectedChapNames <- unique(as.character(filteredData$ChapterName))[c(input$chapters[1]:input$chapters[2])]\n      filteredData <- filteredData[as.character(filteredData$ChapterName) %in% selectedChapNames,]\n      \n      filteredData$CharacterName <- as.character(filteredData$CharacterName)\n      filteredData$Chapter <- floor(filteredData$Percentile)\n      \n      cooccurenceTable <- melt(crossprod(table(filteredData[c('Chapter','CharacterName')])))\n      colnames(cooccurenceTable)[2] <- \"CharacterName1\"\n      \n      maxValue <- max(cooccurenceTable$value)\n      cooccurenceTable$value <- log10(9*(cooccurenceTable$value / maxValue)+1)\n     \n      cooccurenceTable\n    }\n  })\n  \n  output$cooccurrencePlot <- renderPlot({\n    plotData <- filterCooccurenceData()\n    \n    if(length(plotData) != 0){\n      cGraph <- ggplot(plotData, aes(x=CharacterName, y=CharacterName1, alpha=value))\n      cGraph <- cGraph + geom_tile(aes(fill=factor(1)), colour='white')\n      cGraph <- cGraph + xlab(NULL) + ylab(NULL)\n      cGraph <- cGraph + theme(axis.text.x = element_text(colour=\"black\", angle = 45, hjust = 1, vjust=1.03),\n                               axis.text.y = element_text(colour = \"black\"),\n                               axis.ticks = element_blank())\n      cGraph <- cGraph + theme(panel.grid.minor = element_line(colour = \"white\", size = 1),\n                               panel.grid.major = element_blank())\n      cGraph <- cGraph + scale_fill_manual(values=c(\"#B40404\"), guide = FALSE)\n      cGraph <- cGraph + scale_alpha_continuous(guide = FALSE)\n      cGraph <- cGraph + coord_fixed(ratio=1)\n      \n      cGraph\n    }\n  }, height=700)\n})",
    "created" : 1422267505133.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1897076847",
    "id" : "4999A191",
    "lastKnownWriteTime" : 1422771187,
    "path" : "F:/R-Workspace/book/server.R",
    "project_path" : "server.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_source"
}